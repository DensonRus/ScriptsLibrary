#Использовать asserts

#Использовать ".."



Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботоСпособностьКласса");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПростуюИнициализациюКласса");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьИнициализациюКласса");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПреобразованиеКБитам");
	
	Возврат ВсеТесты;
КонецФункции



Процедура ПередЗапускомТеста() Экспорт
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботоСпособностьКласса() Экспорт
	
	строка = "Привет, мир";
	Конвертер = Новый Конвертер();
	Результат =  Конвертер.Echo(строка);
	Ожидаем.Что(Результат, "Ожидаем, что строки равны").Равно(строка);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПростуюИнициализациюКласса() Экспорт
	
	//Добавление эталонов
	Эталон = 1;
	ЭталонЕдинициИзмерения = ЕдиницыИзмерений.Мегабайт;
	ЭталонБазоваяЕдиница = 8388608;

	//Получение данных
	Конвертер = Новый Конвертер();

	РезультатЗначение = Конвертер.ПолучитьЗначение();
	РезультатЕдиницаИзмерения = Конвертер.ПолучитьЗначениеЕдиницыИзмерения();
	РезультатЕдиницаВБазовойЕдинице = Конвертер.ПолучитьЗначениеЕдиницыИзмеренияВБазовойЕдинице();

	//Проверка с эталоном
	Ожидаем.Что(РезультатЗначение, "Ожидаем, что значение по умолчанию равно 1").Равно(Эталон);
	Ожидаем.Что(РезультатЕдиницаИзмерения, "Ожидаем, что значение по умолчанию равно Мбайт").Равно(ЭталонЕдинициИзмерения);
	Ожидаем.Что(РезультатЕдиницаВБазовойЕдинице, "Ожидаем, что значение по умолчанию равно Мбайт").Равно(ЭталонБазоваяЕдиница);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьИнициализациюКласса() Экспорт
	

	// Тест инициализированы оба параметра	
	ЭталонЕдиницаИзмерения = ЕдиницыИзмерений.Терабайт;
	Эталон = 12;
	ЭталонБазоваяЕдиница = 12 * 8796093022208;

	Конвертер = Новый Конвертер(12, ЕдиницыИзмерений.Терабайт);
	РезультатЗначение =  Конвертер.ПолучитьЗначение();
	РезультатЕдиницаИзмерения = Конвертер.ПолучитьЗначениеЕдиницыИзмерения();
	РезультатЕдиницаВБазовойЕдинице = Конвертер.ПолучитьЗначениеЕдиницыИзмеренияВБазовойЕдинице();

	Ожидаем.Что(РезультатЕдиницаИзмерения, "Ожидаем, что Тбайт равно Тбайт").Равно(ЭталонЕдиницаИзмерения);
	Ожидаем.Что(РезультатЗначение, "Ожидаем, что результат равен 12").Равно(Эталон);
	Ожидаем.Что(РезультатЕдиницаВБазовойЕдинице, "Ожидаем, что значение в базовых единиц для ТБ равны").Равно(ЭталонБазоваяЕдиница);

	Конвертер = Неопределено;
	// Тест инициализирован первый параметр

	ЭталонЕдиницаИзмерения = ЕдиницыИзмерений.Мегабайт;
	Эталон = 13;
	ЭталонБазоваяЕдиница = 13 * 8388608;

	Конвертер = Новый Конвертер(13);
	РезультатЗначение =  Конвертер.ПолучитьЗначение();
	РезультатЕдиницаИзмерения = Конвертер.ПолучитьЗначениеЕдиницыИзмерения();
	РезультатЕдиницаВБазовойЕдинице = Конвертер.ПолучитьЗначениеЕдиницыИзмеренияВБазовойЕдинице();


	Ожидаем.Что(РезультатЕдиницаИзмерения, "Ожидаем, что Мбайт равно Мбайт").Равно(ЭталонЕдиницаИзмерения);
	Ожидаем.Что(РезультатЗначение, "Ожидаем, что результат равен 13").Равно(Эталон);
	Ожидаем.Что(РезультатЕдиницаВБазовойЕдинице, "Ожидаем, что значение в базовых единиц для МБ равны").Равно(ЭталонБазоваяЕдиница);

	// Тест иницмализирован второй параметр 

	ЭталонЕдиницаИзмерения = ЕдиницыИзмерений.Гигабайт;
	Эталон = 1;
	ЭталонБазоваяЕдиница = 1 * 8589934592;

	Конвертер = Новый Конвертер( ,ЕдиницыИзмерений.Гигабайт);
	РезультатЗначение =  Конвертер.ПолучитьЗначение();
	РезультатЕдиницаИзмерения = Конвертер.ПолучитьЗначениеЕдиницыИзмерения();
	РезультатЕдиницаВБазовойЕдинице = Конвертер.ПолучитьЗначениеЕдиницыИзмеренияВБазовойЕдинице();

	Ожидаем.Что(РезультатЕдиницаИзмерения, "Ожидаем, что Гбайт равно Гбайт").Равно(ЭталонЕдиницаИзмерения);
	Ожидаем.Что(РезультатЗначение, "Ожидаем, что результат равен 1").Равно(Эталон);
	Ожидаем.Что(РезультатЕдиницаВБазовойЕдинице, "Ожидаем, что значение в базовых единиц для ГБ равны").Равно(ЭталонБазоваяЕдиница);

КонецПроцедуры



// Проверка базовых методов
Процедура ТестДолжен_ПроверитьПреобразованиеКБитам() Экспорт
	
	// Простой тест преобразования
	ВызватьИсключение "Не реализовано";

КонецПроцедуры
